예외 처리
	컴파일 시, 빌드 시, 런타임 시 오류가 발생하면
	이를 제어문으로 막을 수 있으나, 제어문으로도 막을 수 없는
	오류들을 직접 처리할 수 있어야 한다.	
예외 처리 문법
	try {
		예외가 발생할 수 있는 문장;
		
	} catch(예외이름 객체명) {
		예외 발생 시 실행할 문장;

	} catch(예외이름 객체명) {
		예외 발생 시 실행할 문장;

	} ...


	} finally {
		예외 발생 여부에 상관 없이 무조건 실행할 문장;
		※ 외부 장치와 연결 했을 경우 다시 닫을 때 주로 사용한다.
	}

예외 발생
	직접 예외를 발생시키기 위해서느 예외 던지기를 사용해야 하며, 이 때에는 생성자 호출 전 throw 키워드를 사용한다.
	예) throw new BadWordException();

사용자 정의 예외
	기본적으로 제공되는 예외가 아닌 특정 상황에서 직접 예외를 만들어야 한다면, Exception 혹은
	RuntimeException을 상속 받아서 예외 클래스를 선언해야 한다.
	Exception은 컴파일러가 체크를 하기 때문에 예외처리를 강제로 해야하고,
	RuntimeException은 컴파일러가 체크하지 않기 때문에 예외처리를 선택할 수 있다.

------------------------------------------------------------------------------------------

API(Apllication Programming interface)
	개발에 필요한 라이브러리들의 집합.
	선배 개발자들이 만들어 놓은 소스코드.

	- 내부 API
		JDK 설치 시 제공해주는 기본 API
		docs.oracle.com/javase

	- 외부 API
		선배 개발자들이 개발한 패키지 및 클래스들을 의미한다.
		보통 JAR 파일로 배포하며 자바 프로젝트의 build path에 추가하여 사용할 수 있다.

------------------------------------------------------------------------------------------

Object 클래스
	1. toString()
		항상 객체을 출력할 때에는 toString()을 붙여서 출력해준다.
		따라서 객체명만 출력메소드에 전달하더라도 toString() 문자열 값이 출력된다.
		기본적으로 Object에서는 소속과 필드 주소를 문자열로 리턴해주지만,
		실 사용에서는 불필요한 정보이기 때문에, 재정의한 뒤 필드의 정보를 확인하도록 구현한다.
		실무에서는 클래스 선언 시 각 필드의 초기화 여불르 확인하기 위해 toString()을 재정의하여 사용한다.

	2. equals()
		주소값 비교(==)
		String 클래스에서 equals()를 값 비교로 재정의하여 사용하기 때문에
		문자열 비교는 무조건 equlas()로 비교한다.


	3. hashCode()
		JVM에서 관리하는 중복 없는 값. 실제 메모리에 할당되는 주소와 다르다.
		String 클래스에서는 필드의 해시코드 값이 아닌 문자열 상수 값의 해시코드 값을
		리턴하도록 재정의하였다.
		※ 컬렉션 프레임워크 챕터에서 재정의 목적을 이해하도록 한다.
		
------------------------------------------------------------------------------------------

Wrapper Class : 기본 자료형들의 클래스 타입
	클래스타입 객체 = new 클래스타입(일반 타입의 값);	// boxing, 권장하지 않는다(Deprecated)
	클래스타입 객체 = 클래스타입.valueOf(일반 타입의 값)	// boxing;
	일반타입 변수 = 객체.000Value();	// unboxing;
		
	JDK4버전 이상부터는 auto를 지원한다.

	클래스타입 객체 = 일반 타입의 값;	// auto boxing;
	일반 타입 변수 = 객체;	// auto unboxing;
		
------------------------------------------------------------------------------------------

컬렉션 프레임워크
	


























